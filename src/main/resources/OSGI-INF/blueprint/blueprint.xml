<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2005-2018 Red Hat, Inc. Red Hat licenses this file to you 
    under the Apache License, version 2.0 (the "License"); you may not use this 
    file except in compliance with the License. You may obtain a copy of the 
    License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by 
    applicable law or agreed to in writing, software distributed under the License 
    is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
    KIND, either express or implied. See the License for the specific language 
    governing permissions and limitations under the License. -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd              http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <camelContext id="mil-disa-demo"
        xmlns="http://camel.apache.org/schema/blueprint"
        xmlns:order="http://org.jboss.fuse.quickstarts/examples/order/v7">

        <!-- route that consumes files from a directory -->
        <route id="FileRoute">
            <from uri="file:work/eip/input" />
            <log message="[file]    Processing ${file:name}" />
            <wireTap uri="direct:wiretap" />
            <to uri="direct:mainProcessing" />
            <to uri="direct:splitter" />
            <log message="[main]    Done processing ${file:name}" />
        </route>

        <!-- Archives each file order received -->
        <route id="wiretapRoute">
            <from uri="direct:wiretap" />
            <log message="[wiretap]  Archiving ${file:name}" />
            <to uri="file:work/eip/archive" />
        </route>

        <!-- Split multiple orders in a message then process each one -->
        <route id="splitterRoute">
            <from uri="direct:splitter" />
            <split>
                <!-- use xpath to split the orders -->
                <xpath>//order:order</xpath>
                <!-- Preserve the original order message before setting up 
                    call to RHDM KIE server -->
                <setProperty id="_setProperty1"
                    propertyName="origInBody">
                    <simple>${in.body}</simple>
                </setProperty>
                <!-- transform message body to request format for RHDM KIE 
                    server -->
                <to uri="xslt:kieserver-request.xsl" />
                <!-- add required headers for REST call to RHDM KIE server -->
                <setHeader headerName="Content-Type">
                    <constant>application/xml</constant>
                </setHeader>
                <setHeader headerName="X-KIE-ContentType">
                    <constant>xstream</constant>
                </setHeader>
                <setHeader headerName="Accept">
                    <constant>application/xml</constant>
                </setHeader>
                <!-- determine geographic region using RHDM KIE server REST 
                    service -->
                <inOut
                    uri="http4://localhost:8080/kie-server/services/rest/server/containers/instances/demo_1.0.0?authMethod=BASIC&amp;authUsername=dmUser&amp;authPassword=admin1jboss!" />
                <!-- set region based on REST API call -->
                <setHeader headerName="region">
                    <xpath resultType="java.lang.String">//region</xpath>
                </setHeader>
                <!-- restore original message body -->
                <setBody>
                    <simple>${in.header.origInBody}</simple>
                </setBody>
                <!-- set order id header based on order content -->
                <setHeader headerName="orderId">
                    <xpath resultType="java.lang.String">/order:order/@id</xpath>
                </setHeader>
                <!-- log using the extra headers we just added to the message -->
                <log
                    message="[splitter] Shipping order ${header.orderId} to region ${header.region}" />
                <!-- use recipient list to dynamically generate endpoint 
                    and send message to multiple destinations -->
                <recipientList>
                    <simple>file:work/eip/output/${header.region}?fileName=${header.orderId}.xml,direct:filter</simple>
                </recipientList>
            </split>
        </route>

        <!-- Uses filter to determine if order requires special processing 
            but currently just logs -->
        <route id="filterRoute">
            <from uri="direct:filter" />
            <filter>
                <xpath resultType="java.lang.String">sum(//order:quantity/text()) &gt; 100</xpath>
                <log
                    message="[filter]   Order ${header.orderId} is an order for more than 100 animals" />
            </filter>
        </route>
    </camelContext>
</blueprint>
